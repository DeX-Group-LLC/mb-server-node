---
description: General Rules for Modifying `src` Files
globs: *.ts
---
# General Rules for Modifying `src` Files

1. **Document Thoroughly:**
   - Use JSDocs for functions, classes, and methods. Follow JSDoc style guidelines enforced by ESLint (e.g., `jsdoc/check-alignment`, `jsdoc/check-indentation`).
   - Add inline comments to explain complex logic.

2. **Update Unit Tests:**
    * Run `npm run test` before updating unit tests to check for any existing unit tests that may need to be updated. This will also provide code coverage information to help you determine if you need to add more tests.
    * Create new unit tests for any new code added.
    * Modify existing unit tests to cover changes made to existing code.

3. **Update README:** If changes affect repository-level functionality, update the [README.md](mdc:README.md) file accordingly.

4. **Use Correct Import Paths:** Always use the defined import paths when importing modules within the project. Do not use relative paths when an alias is available. The available aliases are:
    * `@/` - `src/`
    * `@core/` - `src/core/`
    * `@config` - `src/config`
    * `@config/` - `src/config/`
    * `@package.json` - `package.json` (root-level)
    * `@server` - `src/server`
    * `@test/` - `test/`
    * `@utils/` - `src/utils/`
    * `@version` - `src/version`
    ESLint's `no-restricted-imports` rule will enforce this.

5. **Organize Imports:**
    * **Minimize Imports:** Group imports from the same source into a single import statement whenever possible. For example:

        ```javascript
        // Instead of:
        import { MyClass } from '@core/my-module';
        import { myFunction } from '@core/my-module';

        // Do this:
        import { MyClass, myFunction } from '@core/my-module';
        ```

    * **Import Sections:** Organize imports into the following sections, in this order:
        1. **Standard Library and `package.json` Dependencies:** Modules from the Node.js standard library (e.g., `fs`, `path`) and dependencies listed in your `package.json`.
        2. **Custom Paths:** Imports using your defined import aliases (e.g., `@core`, `@utils`).
        3. **Local Paths:** Relative imports from within the same module or a closely related module (e.g., `./my-local-module`).

    * **Alphabetical Order within Sections:** Within each of the above sections, sort imports alphabetically by the source path.

    * **Example:**

        ```javascript
        // Standard Library and package.json Dependencies
        import fs from 'fs';
        import { get } from 'lodash';
        import path from 'path';

        // Custom Paths
        import { MyComponent } from '@/components/MyComponent';
        import { DATA_DIR } from '@config';
        import { MyService } from '@core/services/MyService';
        import { Logger } from '@utils/Logger';

        // Local Paths
        import { myHelperFunction } from './helpers';
        import { siblingFunction } from './sibling-module';
        ```